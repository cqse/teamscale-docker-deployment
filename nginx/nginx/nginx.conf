worker_processes 1;

events {
    worker_connections  1024;
}

http {

  # some Teamscale admin tools, e.g. backup import, require up/downloading large files
  # so we increase the default size and timeout thresholds
  client_max_body_size 2000M;
  proxy_connect_timeout       300;
  proxy_send_timeout          300;
  proxy_read_timeout          300;
  send_timeout                300;

  # we set sensible headers for proxied connections
  proxy_set_header   Host $host;
  proxy_set_header   X-Real-IP $remote_addr;
  proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;

  # we set sensible defaults for SSL caching
  ssl_session_cache shared:SSL:1m;
  ssl_session_timeout 5m;

  # set the Docker DNS resolver
  # we set a low valid time so restarting a container does not result in a long period with out-of-date DNS cache entries
  resolver 127.0.0.11 valid=10s;

  # redirect all traffic to HTTPS
  server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;
    return 301 https://$host$request_uri;
  }

######################
# TODO: you must decide under which URL the production and staging instance of Teamscale should be reachable.
# There are two alternatives:
#
# Use this section if you wish to have staging and production available under the same domain but mounted
# on different subpaths. E.g: teamscale.acme.com/teamscale and teamscale.acme.com/staging
#
# Or: Use the next section instead if you wish to make both production and staging available under different (sub)domains.
# E.g: teamscale.acme.com and teamscale-staging.acme.com
#
# Delete the section that you do not wish to use.

  server {
    listen 443 ssl;
    listen [::]:443 ssl;
    # TODO replace with public hostname of Teamscale server
    server_name teamscale.acme.com;

    # TODO put crt and key file for SSL certificate into ./ssl_certificate.crt and ./ssl_certificate.key
    ssl_certificate /etc/nginx/ssl_certificate.crt;
    ssl_certificate_key /etc/nginx/ssl_certificate.key;

    # reverse proxy for production instance
    location /teamscale/ {
      set $upstream blue_teamscale_1;         # we use dynamic DNS resolution so restarting a Teamscale container will not result in a permanent error 502 but rather nginx will re-resolve the upstream IP on its own

      rewrite ^ $request_uri;                 # make sure the url encoding is left as is
      rewrite ^/teamscale/(.*) /$1 break;     # remove the prefix for the proxied instance
      return 400;                             # second rewrite didn't match (e.g. //teamscale/), better bail out for security reasons
      proxy_pass http://$upstream:8080$uri;   # pass the correctly encoded and stripped url to the instance
      proxy_redirect / /teamscale/;           # add the prefix again for redirect responses from the instance
    }

    # reverse proxy for shadow instance used for no-downtime updates and experiments
    location /staging/ {
      set $upstream green_teamscale_1;

      rewrite ^ $request_uri;
      rewrite ^/staging/(.*) /$1 break;
      return 400;
      proxy_pass http://$upstream:8080$uri;
      proxy_redirect / /staging/;
    }

    # Redirect / to the production URL
    location = / {
      return 301 https://$host/teamscale;
    }
  }

######################


######################
# TODO: Use this section instead if you wish to make both production and staging available under different (sub)domains.

  # reverse proxy for production instance
  server {
    # TODO replace with public hostname of production Teamscale server
    server_name teamscale.acme.com;
    listen 443 ssl;
    listen [::]:443 ssl;

    # TODO put crt and key file for SSL certificate into ./ssl_certificate.crt and ./ssl_certificate.key
    ssl_certificate /etc/nginx/ssl_certificate.crt;
    ssl_certificate_key /etc/nginx/ssl_certificate.key;

    location / {
      set $upstream blue_teamscale_1;    # we use dynamic DNS resolution so restarting a Teamscale container will not result in a permanent error 502 but rather nginx will re-resolve the upstream IP on its own
      proxy_pass http://$upstream:8080;
    }
  }

  # reverse proxy for shadow instance used for no-downtime updates and experiments
  server {
    # TODO replace with public hostname of staging Teamscale server
    server_name teamscale-staging.acme.com;
    listen 443 ssl;
    listen [::]:443 ssl;

    # TODO put crt and key file for SSL certificate into ./ssl_certificate.crt and ./ssl_certificate.key
    ssl_certificate /etc/nginx/ssl_certificate.crt;
    ssl_certificate_key /etc/nginx/ssl_certificate.key;

    location / {
      set $upstream green_teamscale_1;
      proxy_pass http://$upstream:8080;
    }
  }

######################

}
